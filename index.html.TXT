<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formulário de Orçamento Simples</title>
    <!-- Link para o arquivo manifest.json para PWA -->
    <link rel="manifest" href="manifest.json">
    <style>
        body {
            font-family: 'Inter', Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f0f2f5; /* Fundo mais suave */
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            box-sizing: border-box;
        }
        .container {
            background-color: #ffffff;
            padding: 25px;
            border-radius: 16px; /* Cantos mais arredondados */
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08); /* Sombra mais suave */
            max-width: 800px;
            width: 100%;
            box-sizing: border-box;
        }
        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 20px; /* Ajuste a margem para o novo campo */
            font-size: 1.8em;
            font-weight: 600; /* Um pouco mais leve */
        }
        .company-info {
            margin-bottom: 25px;
            text-align: center;
        }
        .company-info label {
            display: block;
            margin-bottom: 8px;
            font-size: 1em;
            color: #555;
            font-weight: bold;
        }
        .company-info input[type="text"] {
            width: calc(100% - 22px);
            padding: 10px;
            border: 1px solid #dcdcdc;
            border-radius: 8px;
            font-size: 1em;
            box-sizing: border-box;
            height: 45px;
        }
        .logo-input-group {
            margin-top: 15px;
            margin-bottom: 15px;
            padding: 15px;
            border: 1px solid #e8e8e8;
            border-radius: 12px;
            background-color: #fcfcfc;
        }
        .logo-input-group .radio-options {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 15px;
        }
        .logo-input-group .radio-option {
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        .logo-input-group .radio-option input[type="radio"] {
            margin-right: 8px;
            cursor: pointer;
        }
        .logo-input-group .logo-input-fields {
            margin-top: 10px;
        }
        .logo-input-group .logo-input-fields label {
            text-align: left;
            margin-bottom: 5px;
        }
        .logo-input-group .logo-input-fields input[type="text"],
        .logo-input-group .logo-input-fields input[type="file"] {
            width: calc(100% - 22px);
            padding: 10px;
            border: 1px solid #dcdcdc;
            border-radius: 8px;
            font-size: 0.95em;
            box-sizing: border-box;
            height: 40px;
            margin-bottom: 10px;
        }
        .logo-display-area {
            margin-top: 10px;
            padding: 10px;
            border: 1px dashed #ccc;
            border-radius: 8px;
            min-height: 50px;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #f9f9f9;
        }
        .logo-display-area img {
            max-width: 100%;
            max-height: 80px; /* Limita a altura do logo para não distorcer o layout */
            height: auto;
            border-radius: 8px;
            display: none; /* Esconde a imagem por padrão até que um URL seja válido */
        }
        .product-item {
            display: flex;
            flex-wrap: nowrap; /* Impede que os itens quebrem a linha */
            align-items: flex-end; /* Alinha os itens na parte inferior */
            margin-bottom: 15px;
            gap: 5px; /* Espaçamento entre os itens bem menor */
            padding: 12px; /* Um pouco mais de padding */
            border: 1px solid #e8e8e8; /* Borda mais clara */
            border-radius: 10px; /* Cantos mais arredondados */
            background-color: #fdfdfd; /* Fundo mais claro */
            position: relative;
            overflow-x: hidden; /* Remove explicitamente o scroll horizontal */
        }
        .product-item input[type="text"],
        .product-item input[type="number"] {
            padding: 10px;
            border: 1px solid #dcdcdc; /* Borda mais clara */
            border-radius: 8px; /* Cantos mais arredondados */
            font-size: 0.95em;
            box-sizing: border-box;
            height: 40px;
        }
        .product-item .product-description {
            flex: 1; /* Permite crescer e ocupar o espaço restante */
            min-width: 150px; /* Garante largura mínima para a descrição */
        }
        .product-item .total-display {
            flex: 0 0 60px; /* Largura base ajustada para ser menor */
            padding: 10px 5px; /* Reduz padding horizontal */
            background-color: #f2f2f2; /* Fundo mais suave */
            border: 1px solid #d0d0d0; /* Borda mais suave */
            border-radius: 8px; /* Cantos mais arredondados */
            text-align: right;
            font-weight: bold;
            color: #555;
            min-width: 50px; /* Garante que não fique muito pequeno */
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: flex-end;
        }
        .product-item label {
            font-size: 0.75em; /* Reduzindo um pouco o tamanho da fonte da label */
            color: #6a6a6a; /* Cor de texto um pouco mais suave */
            margin-bottom: 3px; /* Reduzindo a margem inferior */
            width: 100%;
            display: block;
            text-align: center; /* Centraliza a label sobre o input */
        }
        .product-item div.input-group {
            display: flex;
            flex-direction: column;
            flex: 0 0 60px; /* Largura base para Qtd, Valor, Acréscimo (45px) */
            align-items: center; /* Centraliza o input dentro do group */
        }
        .product-item input[type="number"] {
            width: 100%; /* Faz o input preencher a largura do seu input-group */
            padding: 5px 3px; /* Reduzindo o padding para caber mais números */
            text-align: center; /* Centraliza o texto do número */
        }

        .delete-product {
            background-color: #ff6b6b; /* Vermelho mais suave */
            color: white;
            border: none;
            border-radius: 50%;
            width: 28px;
            height: 28px;
            font-size: 0.9em;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            position: absolute;
            top: -10px;
            right: -10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15); /* Sombra mais suave */
            transition: background-color 0.2s ease, transform 0.2s ease;
        }
        .delete-product:hover {
            background-color: #ff4757; /* Vermelho um pouco mais forte no hover */
            transform: scale(1.05);
        }

        .add-product {
            background-color: #3cb371; /* Verde mais suave */
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1.1em;
            display: block;
            width: 100%;
            margin: 25px 0;
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
            box-shadow: 0 4px 10px rgba(0, 123, 255, 0.2); /* Sombra sutil */
        }
        .add-product:hover {
            background-color: #2e8b57; /* Verde mais forte no hover */
            box-shadow: 0 6px 15px rgba(0, 123, 255, 0.3);
        }
        .delivery-section, .discount-section, .pix-info, .credit-card-info {
            margin-top: 25px;
            padding: 20px;
            background-color: #fcfcfc; /* Fundo mais claro */
            border: 1px solid #e8e8e8; /* Borda mais clara */
            border-radius: 12px; /* Cantos mais arredondados */
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05); /* Sombra mais suave */
        }
        .delivery-section label, .delivery-section input,
        .discount-section label, .discount-section input,
        .pix-info label, .pix-info input, .pix-info select {
            display: block;
            margin-bottom: 15px;
        }
        .delivery-section input,
        .discount-section input,
        .pix-info input, .pix-info select {
            width: calc(100% - 22px);
            padding: 10px;
            border: 1px solid #dcdcdc;
            border-radius: 8px;
            margin-top: 5px;
            font-size: 0.95em;
            box-sizing: border-box;
        }
        .summary {
            margin-top: 30px;
            border-top: 2px solid #e0e0e0; /* Borda mais clara */
            padding-top: 20px;
        }
        .summary div {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            font-size: 1.15em;
        }
        .summary div strong {
            color: #333;
        }
        .total-pay strong {
            font-size: 1.5em;
            color: #007BFF;
            font-weight: bold;
        }
        .credit-card-info p {
            font-size: 0.9em;
            color: #888; /* Cor de texto mais suave */
            text-align: center;
        }
        .button-group {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 30px;
        }
        .print-button, .save-button, .load-button {
            flex: 1;
            background-color: #007BFF;
            color: white;
            padding: 12px 15px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1em;
            box-sizing: border-box;
            text-align: center;
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
            min-width: 120px;
            box-shadow: 0 4px 10px rgba(0, 123, 255, 0.2); /* Sombra sutil */
        }
        .print-button:hover, .save-button:hover, .load-button:hover {
            background-color: #0056b3;
            box-shadow: 0 6px 15px rgba(0, 123, 255, 0.3);
        }
        .save-button {
            background-color: #ffa040; /* Laranja mais suave */
            box-shadow: 0 4px 10px rgba(255, 152, 0, 0.2);
        }
        .save-button:hover {
            background-color: #e68900;
            box-shadow: 0 6px 15px rgba(255, 152, 0, 0.3);
        }
        .load-button {
            background-color: #8a63d2; /* Roxo mais suave */
            box-shadow: 0 4px 10px rgba(103, 58, 183, 0.2);
        }
        .load-button:hover {
            background-color: #724cb8;
            box-shadow: 0 6px 15px rgba(103, 58, 183, 0.3);
        }

        /* New buttons styling */
        .top-buttons-group {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 25px;
            justify-content: center; /* Centraliza os botões */
        }
        .top-buttons-group button {
            flex: 1;
            padding: 10px 15px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.95em;
            box-sizing: border-box;
            text-align: center;
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
            min-width: 140px; /* Garante que os botões não fiquem muito pequenos */
        }
        .new-budget-button {
            background-color: #dc3545; /* Vermelho para "Novo Orçamento" */
            color: white;
            box-shadow: 0 4px 10px rgba(220, 53, 69, 0.2);
        }
        .new-budget-button:hover {
            background-color: #c82333;
            box-shadow: 0 6px 15px rgba(220, 53, 69, 0.3);
        }
        .reload-values-button {
            background-color: #17a2b8; /* Azul ciano para "Recarregar Valores" */
            color: white;
            box-shadow: 0 4px 10px rgba(23, 162, 184, 0.2);
        }
        .reload-values-button:hover {
            background-color: #138496;
            box-shadow: 0 6px 15px rgba(23, 162, 184, 0.3);
        }

        /* A2HS Button */
        #install-app-button {
            display: none; /* Hidden by default */
            background-color: #6f42c1; /* Roxo */
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.95em;
            margin-top: 20px;
            width: 100%;
            box-sizing: border-box;
            box-shadow: 0 4px 10px rgba(111, 66, 193, 0.2);
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
        }
        #install-app-button:hover {
            background-color: #5a359a;
            box-shadow: 0 6px 15px rgba(111, 66, 193, 0.3);
        }

        /* WhatsApp Support Button */
        .whatsapp-support-container {
            margin-top: 30px;
            text-align: center;
        }
        .whatsapp-support-button {
            background-color: #25D366; /* Verde WhatsApp */
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1em;
            display: inline-flex; /* Para alinhar o ícone e texto */
            align-items: center;
            gap: 8px; /* Espaçamento entre ícone e texto */
            box-shadow: 0 4px 10px rgba(37, 211, 102, 0.2);
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
        }
        .whatsapp-support-button:hover {
            background-color: #1DA851;
            box-shadow: 0 6px 15px rgba(37, 211, 102, 0.3);
        }
        .whatsapp-support-button svg {
            width: 20px;
            height: 20px;
            fill: white; /* Cor do ícone */
        }


        /* Estilos para impressão */
        @media print {
            body {
                margin: 0;
                padding: 0;
                background-color: #fff;
                font-size: 12pt;
            }
            .container {
                box-shadow: none;
                border-radius: 0;
                padding: 10px;
                max-width: none;
                margin: 0;
            }
            h1 {
                font-size: 1.5em;
                margin-bottom: 20px;
            }
            .company-info {
                text-align: center;
                margin-bottom: 15px;
            }
            .company-info label,
            .company-info input {
                display: none !important; /* Oculta a label e o input na impressão */
            }
            .company-info .print-only-company-name {
                display: block !important;
                font-size: 1.2em;
                font-weight: bold;
                margin-bottom: 10px;
            }
            .logo-input-group, /* Oculta todo o grupo de input de logo online */
            .logo-input-group .radio-options,
            .logo-input-group .logo-input-fields {
                display: none !important;
            }
            .top-buttons-group, /* Oculta os novos botões na impressão */
            #install-app-button, /* Oculta o botão de instalação na impressão */
            .whatsapp-support-container, /* Oculta o botão de WhatsApp na impressão */
            .product-item input[type="number"],
            .product-item .value-input,
            .product-item .percentage-input,
            .add-product,
            .summary .subtotal,
            .summary .additional-value,
            .delivery-cost-summary, /* Oculta o resumo de entrega online */
            .discount-amount-summary, /* Oculta o resumo de desconto online */
            .pix-info .online-only,
            .delivery-section .online-only,
            .discount-section .online-only,
            .button-group,
            .credit-card-info,
            .delete-product,
            .product-item label, /* Oculta todas as labels dos itens de produto */
            .product-item div.input-group /* Oculta os grupos de input (Qtd, Valor, Acr.) */
            {
                display: none !important;
            }
            .product-item {
                display: block; /* Volta para bloco para que a descrição ocupe a linha toda */
                margin-bottom: 8px;
                padding: 0;
                border: none;
                background: none;
            }
            .product-item .product-description {
                width: 100%; /* Ocupa a largura total na impressão */
                border: none;
                background: none;
                padding: 0;
                font-size: 1em;
                display: block !important; /* Garante que a descrição seja visível */
            }
            .product-item .total-display {
                display: none !important; /* Oculta o total-display original na impressão */
            }
            .product-item .quantity-display { /* Este não existe no HTML, mas é um exemplo se fosse necessário */
                display: none !important;
            }
            .summary {
                border-top: 1px dashed #ccc;
                padding-top: 10px;
                margin-top: 10px;
            }
            .summary div {
                font-size: 1em;
                padding: 3px 0;
            }
             .total-pay {
                font-weight: bold;
                margin-top: 15px;
                border-top: 1px solid #000;
                padding-top: 10px;
            }
            .pix-info, .delivery-section, .discount-section {
                display: block !important;
                background-color: #fff;
                border: none;
                padding: 0;
                margin-top: 15px;
            }
             .pix-info label, .delivery-section label, .discount-section label {
                display: inline;
                font-weight: bold;
                margin-right: 5px;
            }
            .pix-info .print-only, .delivery-section .print-only, .discount-section .print-only {
                display: block !important;
            }

            /* Força a exibição dos novos totais na impressão */
            .summary #gross-total-print-info,
            .summary #discount-amount-print-info {
                display: flex !important;
            }
        }

        /* Responsividade para telas menores */
        @media (max-width: 600px) {
            body {
                padding: 10px;
            }
            .container {
                padding: 15px;
            }
            .product-item {
                flex-direction: column; /* Em telas muito pequenas, volta a empilhar */
                align-items: stretch;
            }
            .product-item input[type="text"],
            .product-item input[type="number"],
            .product-item .total-display {
                width: 100%;
                margin-bottom: 10px;
            }
            .product-item div.input-group {
                width: 100%;
                margin-bottom: 10px;
            }
            .button-group, .top-buttons-group {
                flex-direction: column;
            }
            .print-button, .save-button, .load-button, .new-budget-button, .reload-values-button, #install-app-button, .whatsapp-support-button {
                width: 100%;
                margin-bottom: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>FORMULÁRIO DE ORÇAMENTO SIMPLES</h1>

        <div class="company-info">
            <label for="company-name">Nome da Empresa / CNPJ:</label>
            <input type="text" id="company-name" placeholder="Digite o nome ou CNPJ da empresa">
            <div class="print-only-company-name" style="display:none;"></div>
        </div>

        <div class="logo-input-group">
            <div class="radio-options">
                <label class="radio-option">
                    <input type="radio" name="logo-source-type" value="url" id="radio-logo-url" checked> URL do Logo
                </label>
                <label class="radio-option">
                    <input type="radio" name="logo-source-type" value="file" id="radio-logo-file"> Upload de Arquivo Local
                </label>
            </div>

            <div id="logo-url-fields" class="logo-input-fields">
                <label for="logo-url-input">URL do Logo da Empresa:</label>
                <input type="text" id="logo-url-input" placeholder="Cole aqui o endereço da imagem do seu logo (ex: https://seusite.com/logo.png)">
            </div>

            <div id="logo-file-fields" class="logo-input-fields" style="display: none;">
                <label for="logo-file-input">Selecione o arquivo do Logo:</label>
                <input type="file" id="logo-file-input" accept="image/*">
            </div>

            <div class="logo-display-area">
                <img id="company-logo" src="" alt="Logo da Empresa">
            </div>
        </div>

        <div class="top-buttons-group">
            <button class="new-budget-button" onclick="newBudget()">Novo Orçamento</button>
            <button class="reload-values-button" onclick="reloadValues()">Recarregar Valores</button>
        </div>

        <button id="install-app-button">Adicionar à Tela Inicial</button>

        <div id="product-list">
            <div class="product-item">
                <input type="text" class="product-description" placeholder="Descrição do Produto">
                <div class="input-group">
                    <label>Qtd:</label>
                    <input type="number" class="quantity-input" value="1" min="1">
                </div>
                <div class="input-group">
                    <label>Valor (R$):</label>
                    <input type="number" class="value-input" placeholder="0.00" step="0.01">
                </div>
                <div class="input-group">
                    <label>acr. (%):</label>
                    <input type="number" class="percentage-input" value="20" min="0">
                </div>
                <div class="total-display">R$ 0,00</div>
                <button class="delete-product">X</button>
            </div>
        </div>

        <button class="add-product" onclick="addProduct()">Adicionar Produto</button>

        <div class="delivery-section">
            <h3 class="online-only">Informações de Entrega:</h3>
            <label class="online-only" for="distance">Distância (KM):</label>
            <input class="online-only" type="number" id="distance" placeholder="0" step="0.1">

            <label class="online-only" for="price-per-km">Valor por KM (R$):</label>
            <input class="online-only" type="number" id="price-per-km" placeholder="0.00" step="0.01">

            <div class="print-only" id="delivery-print-info" style="display:none;">
                <p><strong>Valor de Entrega:</strong> R$ <span class="delivery-cost-display">0,00</span></p>
            </div>
        </div>

        <div class="discount-section">
            <h3 class="online-only">Desconto (Pix):</h3>
            <label class="online-only" for="pix-discount-percentage">Desconto no Pix (%):</label>
            <input class="online-only" type="number" id="pix-discount-percentage" placeholder="0" min="0" max="100" step="0.1">

            <div class="print-only" id="discount-print-info" style="display:none;">
                <p><strong>Desconto Pix:</strong> <span class="discount-percentage-display">0%</span></p>
            </div>
        </div>

        <div class="summary">
            <!-- Online view elements (hidden in print) -->
            <div class="subtotal online-only">
                <span>Subtotal (Itens):</span>
                <strong>R$ <span id="subtotal">0,00</span></strong>
            </div>
            <div class="additional-value online-only">
                <span>acr. Total:</span>
                <strong>R$ <span id="additional-value">0,00</span></strong>
            </div>

            <!-- Novas linhas para exibir Valor de Entrega e Valor do Desconto online -->
            <div class="delivery-cost-summary online-only">
                <span>Valor de Entrega:</span>
                <strong>R$ <span id="delivery-cost-summary-display">0,00</span></strong>
            </div>
            <div class="discount-amount-summary online-only">
                <span>Valor do Desconto:</span>
                <strong>R$ <span id="discount-amount-summary-display">0,00</span></strong>
            </div>

            <!-- Print view elements (hidden online) -->
            <div class="print-only" id="gross-total-print-info">
                <span>Total:</span>
                <strong>R$ <span class="gross-total-display">0,00</span></strong>
            </div>
            <div class="print-only" id="discount-amount-print-info">
                <span>Desconto:</span>
                <strong>R$ <span class="discount-amount-display">0,00</span></strong>
            </div>

            <div class="total-pay">
                <span>TOTAL A PAGAR:</span>
                <strong>R$ <span id="total-pay">0,00</span></strong>
            </div>
        </div>

        <div class="pix-info">
            <h3 class="online-only">Informações para Pagamento via Pix:</h3>
            <label class="online-only" for="pix-key-type">Tipo de Chave Pix:</label>
            <select class="online-only" id="pix-key-type">
                <option value="">Selecione o tipo</option>
                <option value="cpf">CPF</option>
                <option value="cnpj">CNPJ</option>
                <option value="email">E-mail</option>
                <option value="phone">Telefone</option>
                <option value="random">Chave Aleatória</option>
            </select>

            <label class="online-only" for="pix-key">Chave Pix:</label>
            <input class="online-only" type="text" id="pix-key" placeholder="Digite a chave Pix">

            <label class="online-only" for="pix-description">Descrição para Identificação:</label>
            <input class="online-only" type="text" id="pix-description" placeholder="Ex: Nome da Empresa, Recebedor">

            <div class="print-only" id="pix-print-info">
                <p><strong>Informações para Pagamento via Pix:</strong></p>
                <p>Tipo de Chave: <span class="pix-key-type-display"></span></p> <!-- Added for printing Pix key type -->
                <p>Chave Pix: <span class="pix-key-display"></span></p>
                <p>Identificação: <span class="pix-description-display"></span></p>
            </div>
        </div>

        <div class="credit-card-info">
            <p>Pode ser pago com cartão de crédito com juros (a consultar condições).</p>
        </div>

        <div class="button-group">
            <button class="print-button" onclick="printForm()">Imprimir Orçamento</button>
            <button class="save-button" onclick="saveForm()">Salvar Orçamento</button>
            <button class="load-button" onclick="loadForm()">Carregar Orçamento</button>
        </div>

        <div class="whatsapp-support-container">
            <button class="whatsapp-support-button" onclick="openWhatsAppGroup()">
                <svg viewBox="0 0 24 24" width="24" height="24" fill="white">
                    <path d="M12.04 2C7.34 2 3.58 5.76 3.58 10.46C3.58 12.11 4.07 13.63 4.93 14.93L3.79 18.21L7.2 17.06C8.36 17.78 9.68 18.17 11.04 18.17H11.08C15.79 18.17 19.55 14.41 19.55 9.71C19.55 5.01 15.79 2 11.04 2ZM16.63 13.06C16.43 13.46 14.99 14.28 14.7 14.39C14.42 14.51 14.2 14.53 13.92 14.16C13.64 13.79 12.67 12.6 12.35 12.18C12.03 11.76 11.76 11.69 11.53 11.77C11.3 11.84 10.23 12.37 9.94 12.69C9.66 13.01 9.4 13.31 9.13 13.34C8.86 13.37 8.61 13.29 8.36 12.92C8.11 12.55 7.42 10.96 7.15 10.42C6.88 9.88 6.94 9.63 7.14 9.42C7.34 9.22 7.6 8.87 7.86 8.61C8.12 8.35 8.38 8.27 8.58 8.01C8.78 7.75 8.97 7.39 9.23 7.07C9.49 6.75 9.76 6.67 9.99 6.69C10.22 6.72 10.49 6.75 10.74 7.3C11 7.85 11.7 8.92 11.77 9.06C11.84 9.2 11.9 9.23 12.13 9.14C12.36 9.05 13.05 8.78 13.8 8.16C14.42 7.65 14.92 7.5 15.11 7.42C15.3 7.34 15.49 7.31 15.72 7.35C15.95 7.39 16.14 7.97 16.36 8.34C16.59 8.71 16.82 9.84 16.57 10.37C16.32 10.9 16.63 13.06 16.63 13.06Z" />
                </svg>
                Suporte WhatsApp
            </button>
        </div>
    </div>

    <script>
        let currentLogoSource = 'url'; // Variável para controlar a fonte do logo (url ou file)
        let deferredPrompt; // Variável para armazenar o evento beforeinstallprompt

        document.addEventListener('DOMContentLoaded', () => {
            // Adiciona listeners para os campos da primeira linha e os campos de entrega/desconto
            attachProductItemListeners(document.querySelector('.product-item'));
            document.getElementById('distance').addEventListener('input', updateOverallTotals);
            document.getElementById('price-per-km').addEventListener('input', updateOverallTotals);
            document.getElementById('pix-discount-percentage').addEventListener('input', updateOverallTotals);
            document.getElementById('pix-key-type').addEventListener('input', updateOverallTotals); // Adicionado para atualizar ao mudar o tipo de chave Pix

            // Listeners para os botões de rádio do logo
            document.getElementById('radio-logo-url').addEventListener('change', toggleLogoInputType);
            document.getElementById('radio-logo-file').addEventListener('change', toggleLogoInputType);

            // Listeners para os inputs de logo
            document.getElementById('logo-url-input').addEventListener('input', updateLogoDisplay);
            document.getElementById('logo-file-input').addEventListener('change', updateLogoDisplay);

            updateOverallTotals(); // Cálculo inicial
            loadForm(); // Tenta carregar dados salvos, incluindo o logo
            registerServiceWorker(); // Registra o Service Worker para PWA

            // PWA - Listener para o evento beforeinstallprompt
            window.addEventListener('beforeinstallprompt', (e) => {
                // Previne que o mini-infobar apareça automaticamente
                e.preventDefault();
                // Armazena o evento para que possa ser acionado mais tarde.
                deferredPrompt = e;
                // Mostra o botão de instalação
                const installButton = document.getElementById('install-app-button');
                if (installButton) {
                    installButton.style.display = 'block';
                }
            });

            // PWA - Listener para o clique no botão de instalação
            const installButton = document.getElementById('install-app-button');
            if (installButton) {
                installButton.addEventListener('click', async () => {
                    if (deferredPrompt) {
                        // Esconde o botão de instalação
                        installButton.style.display = 'none';
                        // Mostra o prompt de instalação
                        deferredPrompt.prompt();
                        // Espera pela resposta do utilizador ao prompt
                        const { outcome } = await deferredPrompt.userChoice;
                        // Opcional: Log o resultado da escolha do utilizador
                        console.log(`User response to the A2HS prompt: ${outcome}`);
                        // Limpa o evento armazenado, pois só pode ser usado uma vez.
                        deferredPrompt = null;
                    }
                });
            }
        });

        function attachProductItemListeners(itemElement) {
            itemElement.querySelectorAll('input').forEach(input => {
                input.addEventListener('input', calculateProductTotalAndOverallTotals);
            });
            itemElement.querySelector('.delete-product').addEventListener('click', deleteProduct);
        }

        function addProduct() {
            const productList = document.getElementById('product-list');
            const newItem = document.createElement('div');
            newItem.classList.add('product-item');
            newItem.innerHTML = `
                <input type="text" class="product-description" placeholder="Descrição do Produto">
                <div class="input-group">
                    <label>Qtd:</label>
                    <input type="number" class="quantity-input" value="1" min="1">
                </div>
                <div class="input-group">
                    <label>Valor (R$):</label>
                    <input type="number" class="value-input" placeholder="0.00" step="0.01">
                </div>
                <div class="input-group">
                    <label>acr. (%):</label>
                    <input type="number" class="percentage-input" value="20" min="0">
                </div>
                <div class="total-display">R$ 0,00</div>
                <button class="delete-product">X</button>
            `;
            productList.appendChild(newItem);

            attachProductItemListeners(newItem); // Anexa listeners ao novo item
            updateOverallTotals();
        }

        function deleteProduct(event) {
            const productItem = event.target.closest('.product-item');
            if (productItem) {
                productItem.remove();
                updateOverallTotals();
            }
        }

        function calculateProductTotalAndOverallTotals(event) {
            const input = event.target;
            const productItem = input.closest('.product-item');

            const quantityInput = productItem.querySelector('.quantity-input');
            const valueInput = productItem.querySelector('.value-input');
            const percentageInput = productItem.querySelector('.percentage-input');
            const totalDisplay = productItem.querySelector('.total-display');

            let quantity = parseFloat(quantityInput.value) || 0;
            let value = parseFloat(valueInput.value) || 0;
            let percentage = parseFloat(percentageInput.value) || 0;

            if (quantity < 0) quantity = 0;
            if (value < 0) value = 0;
            if (percentage < 0) percentage = 0;

            const itemSubtotal = value * quantity;
            const itemTotalWithIncrease = itemSubtotal * (1 + percentage / 100);

            totalDisplay.textContent = `R$ ${itemTotalWithIncrease.toFixed(2).replace('.', ',')}`;
            updateOverallTotals();
        }

        function updateOverallTotals() {
            let subtotalProducts = 0;
            let totalProductsWithIncrease = 0;
            let totalAdditionalValue = 0;

            document.querySelectorAll('.product-item').forEach(item => {
                const quantity = parseFloat(item.querySelector('.quantity-input').value) || 0;
                const value = parseFloat(item.querySelector('.value-input').value) || 0;
                const percentage = parseFloat(item.querySelector('.percentage-input').value) || 0;

                const itemSubtotal = value * quantity;
                const itemTotalWithIncrease = itemSubtotal * (1 + percentage / 100);
                const itemAdditionalValue = itemTotalWithIncrease - itemSubtotal;

                subtotalProducts += itemSubtotal;
                totalProductsWithIncrease += itemTotalWithIncrease;
                totalAdditionalValue += itemAdditionalValue;
            });

            let deliveryCost = 0;
            const distance = parseFloat(document.getElementById('distance').value) || 0;
            const pricePerKm = parseFloat(document.getElementById('price-per-km').value) || 0;

            if (!isNaN(distance) && !isNaN(pricePerKm)) {
                deliveryCost = distance * pricePerKm;
            }
            if (deliveryCost < 0) deliveryCost = 0;


            let pixDiscountPercentage = parseFloat(document.getElementById('pix-discount-percentage').value) || 0;
            if (pixDiscountPercentage < 0) pixDiscountPercentage = 0;
            if (pixDiscountPercentage > 100) pixDiscountPercentage = 100;

            const totalBeforeDiscount = totalProductsWithIncrease + deliveryCost;
            const discountAmount = totalBeforeDiscount * (pixDiscountPercentage / 100); // Calcula o valor do desconto
            const totalPay = totalBeforeDiscount - discountAmount;

            document.getElementById('subtotal').textContent = subtotalProducts.toFixed(2).replace('.', ',');
            document.getElementById('additional-value').textContent = totalAdditionalValue.toFixed(2).replace('.', ',');
            document.getElementById('delivery-cost-summary-display').textContent = deliveryCost.toFixed(2).replace('.', ','); // Atualiza o valor de entrega online
            document.getElementById('discount-amount-summary-display').textContent = discountAmount.toFixed(2).replace('.', ','); // Atualiza o valor do desconto online
            document.getElementById('total-pay').textContent = totalPay.toFixed(2).replace('.', ',');
        }

        function toggleLogoInputType() {
            const urlFields = document.getElementById('logo-url-fields');
            const fileFields = document.getElementById('logo-file-fields');
            const radioUrl = document.getElementById('radio-logo-url');

            if (radioUrl.checked) {
                urlFields.style.display = 'block';
                fileFields.style.display = 'none';
                currentLogoSource = 'url';
            } else {
                urlFields.style.display = 'none';
                fileFields.style.display = 'block';
                currentLogoSource = 'file';
            }
            updateLogoDisplay(); // Atualiza a exibição do logo após a troca
        }

        function updateLogoDisplay() {
            const companyLogoImg = document.getElementById('company-logo');
            companyLogoImg.style.display = 'none'; // Esconde a imagem por padrão

            // Remove o onerror handler anterior para evitar duplicação ou conflitos
            companyLogoImg.onerror = null;

            if (currentLogoSource === 'url') {
                const logoUrlInput = document.getElementById('logo-url-input');
                const url = logoUrlInput.value;
                if (url) {
                    companyLogoImg.src = url;
                    companyLogoImg.style.display = 'block';
                    companyLogoImg.onerror = () => {
                        companyLogoImg.style.display = 'none';
                        companyLogoImg.src = '';
                        console.error('Erro ao carregar o logo da URL fornecida: ' + url);
                    };
                } else {
                    companyLogoImg.src = '';
                }
            } else if (currentLogoSource === 'file') {
                const logoFileInput = document.getElementById('logo-file-input');
                const file = logoFileInput.files[0];

                if (file) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        companyLogoImg.src = e.target.result;
                        companyLogoImg.style.display = 'block';
                    };
                    reader.onerror = () => {
                        companyLogoImg.style.display = 'none';
                        companyLogoImg.src = '';
                        console.error('Erro ao ler o arquivo de logo local.');
                    };
                    reader.readAsDataURL(file);
                } else {
                    companyLogoImg.src = '';
                }
            }
        }

        function printForm() {
            // Prepara informações da empresa para impressão
            const companyNameInput = document.getElementById('company-name');
            const companyNameDisplay = document.querySelector('.print-only-company-name');
            if (companyNameInput.value) {
                companyNameDisplay.textContent = companyNameInput.value;
                companyNameDisplay.style.display = 'block';
            } else {
                companyNameDisplay.style.display = 'none';
            }

            // Prepara o logo para impressão
            const companyLogoImgPrint = document.createElement('img');
            const tempLogoContainer = document.createElement('div');
            tempLogoContainer.classList.add('print-only-logo');
            tempLogoContainer.style.textAlign = 'center';
            tempLogoContainer.appendChild(companyLogoImgPrint);

            const logoUrlInput = document.getElementById('logo-url-input');
            const logoFileInput = document.getElementById('logo-file-input');

            // Function to finalize the print process after logo is handled
            const finalizePrint = () => {
                // Modifica a descrição para impressão (agora incluindo a quantidade novamente)
                document.querySelectorAll('.product-item').forEach(item => {
                    const quantity = item.querySelector('.quantity-input').value; // Pega a quantidade
                    const descriptionInput = item.querySelector('.product-description');
                    const totalDisplay = item.querySelector('.total-display');

                    const originalDescription = descriptionInput.value;
                    const totalValue = totalDisplay.textContent;

                    descriptionInput.setAttribute('data-original-description', originalDescription);
                    // Retorna ao formato: Descrição (Qtd) - Total
                    descriptionInput.value = `${originalDescription} (${quantity}x) - ${totalValue}`;
                    item.classList.add('print-mode'); // Adiciona classe para estilos de impressão
                });

                // Esconde elementos online e mostra os de impressão
                const printOnlyElements = document.querySelectorAll('.print-only');
                const onlineOnlyElements = document.querySelectorAll('.online-only');

                printOnlyElements.forEach(el => el.style.display = 'block');
                onlineOnlyElements.forEach(el => el.style.display = 'none');

                window.print();

                // Reverte as mudanças após a impressão (importante para a visualização online)
                printOnlyElements.forEach(el => el.style.display = 'none');
                onlineOnlyElements.forEach(el => el.style.display = 'block');
                if (tempLogoContainer) { // Remove o logo temporário após a impressão
                    tempLogoContainer.remove();
                }

                // Restaura as descrições originais e remove a classe de print
                document.querySelectorAll('.product-item').forEach(item => {
                    const descriptionInput = item.querySelector('.product-description');
                    const originalDescription = descriptionInput.getAttribute('data-original-description');
                    if (originalDescription) {
                        descriptionInput.value = originalDescription;
                        descriptionInput.removeAttribute('data-original-description');
                    }
                    item.classList.remove('print-mode');
                });
            };

            // Handle logo loading based on currentLogoSource
            if (currentLogoSource === 'url' && logoUrlInput.value) {
                companyLogoImgPrint.src = logoUrlInput.value;
                companyLogoImgPrint.alt = "Logo da Empresa";
                companyLogoImgPrint.style.maxWidth = '150px';
                companyLogoImgPrint.style.maxHeight = '80px';
                companyLogoImgPrint.style.display = 'block';
                companyLogoImgPrint.style.margin = '0 auto 15px auto';

                companyLogoImgPrint.onload = () => {
                    document.body.prepend(tempLogoContainer); // Add container only when image is loaded
                    finalizePrint();
                };
                companyLogoImgPrint.onerror = () => {
                    companyLogoImgPrint.style.display = 'none';
                    console.error('Erro ao carregar o logo da URL para impressão: ' + logoUrlInput.value);
                    // Even if error, proceed with printing without the logo
                    finalizePrint();
                };
            } else if (currentLogoSource === 'file' && logoFileInput.files.length > 0) {
                const file = logoFileInput.files[0];
                const reader = new FileReader();

                reader.onloadend = () => {
                    companyLogoImgPrint.src = reader.result;
                    companyLogoImgPrint.alt = "Logo da Empresa";
                    companyLogoImgPrint.style.maxWidth = '150px';
                    companyLogoImgPrint.style.maxHeight = '80px';
                    companyLogoImgPrint.style.display = 'block';
                    companyLogoImgPrint.style.margin = '0 auto 15px auto';
                    document.body.prepend(tempLogoContainer); // Add container when file is read
                    finalizePrint();
                };
                reader.onerror = () => {
                    companyLogoImgPrint.style.display = 'none';
                    console.error('Erro ao ler o arquivo de logo local para impressão.');
                    // Even if error, proceed with printing without the logo
                    finalizePrint();
                };
                reader.readAsDataURL(file);
            } else {
                // No logo selected or invalid source, proceed directly
                finalizePrint();
            }

            // Prepare Pix info for printing (moved outside logo loading logic)
            const pixKeyTypeSelect = document.getElementById('pix-key-type');
            const pixKeyTypeText = pixKeyTypeSelect.options[pixKeyTypeSelect.selectedIndex].text; // Get selected text
            const pixKey = document.getElementById('pix-key').value;
            const pixDescription = document.getElementById('pix-description').value;

            const pixPrintInfo = document.getElementById('pix-print-info');
            if (pixKey || pixDescription || pixKeyTypeText !== 'Selecione o tipo') { // Check if any Pix info is present
                pixPrintInfo.querySelector('.pix-key-type-display').textContent = pixKeyTypeText; // Set Pix key type
                pixPrintInfo.querySelector('.pix-key-display').textContent = pixKey;
                pixPrintInfo.querySelector('.pix-description-display').textContent = pixDescription;
                pixPrintInfo.style.display = 'block';
            } else {
                pixPrintInfo.style.display = 'none';
            }

            // Prepare delivery info for printing (moved outside logo loading logic)
            const distance = parseFloat(document.getElementById('distance').value) || 0;
            const pricePerKm = parseFloat(document.getElementById('price-per-km').value) || 0;
            let deliveryCost = 0;
            if (!isNaN(distance) && !isNaN(pricePerKm)) {
                deliveryCost = distance * pricePerKm;
            }
            const deliveryPrintInfo = document.getElementById('delivery-print-info');
            if (deliveryCost > 0) {
                deliveryPrintInfo.querySelector('.delivery-cost-display').textContent = deliveryCost.toFixed(2).replace('.', ',');
                deliveryPrintInfo.style.display = 'block';
            } else {
                deliveryPrintInfo.style.display = 'none';
            }

            // Prepare discount info for printing (moved outside logo loading logic)
            const pixDiscountPercentage = parseFloat(document.getElementById('pix-discount-percentage').value) || 0;
            const discountPrintInfo = document.getElementById('discount-print-info');
            if (pixDiscountPercentage > 0) {
                discountPrintInfo.querySelector('.discount-percentage-display').textContent = `${pixDiscountPercentage.toFixed(1).replace('.', ',')}%`;
                discountPrintInfo.style.display = 'block';
            } else {
                discountPrintInfo.style.display = 'none';
            }

            // Calculate and display gross total, discount amount, and total to pay for printing
            let subtotalProducts = 0;
            let totalProductsWithIncrease = 0;

            document.querySelectorAll('.product-item').forEach(item => {
                const quantity = parseFloat(item.querySelector('.quantity-input').value) || 0;
                const value = parseFloat(item.querySelector('.value-input').value) || 0;
                const percentage = parseFloat(item.querySelector('.percentage-input').value) || 0;

                const itemSubtotal = value * quantity;
                const itemTotalWithIncrease = itemSubtotal * (1 + percentage / 100);

                subtotalProducts += itemSubtotal;
                totalProductsWithIncrease += itemTotalWithIncrease;
            });

            const totalBeforeDiscount = totalProductsWithIncrease + deliveryCost;
            const discountAmount = totalBeforeDiscount * (pixDiscountPercentage / 100);
            const totalPay = totalBeforeDiscount - discountAmount;

            document.getElementById('gross-total-print-info').querySelector('.gross-total-display').textContent = totalBeforeDiscount.toFixed(2).replace('.', ',');
            document.getElementById('discount-amount-print-info').querySelector('.discount-amount-display').textContent = discountAmount.toFixed(2).replace('.', ',');
            document.getElementById('total-pay').textContent = totalPay.toFixed(2).replace('.', ',');
        }


        function saveForm() {
            const products = [];
            document.querySelectorAll('.product-item').forEach(item => {
                products.push({
                    description: item.querySelector('.product-description').value,
                    quantity: item.querySelector('.quantity-input').value,
                    value: item.querySelector('.value-input').value,
                    percentage: item.querySelector('.percentage-input').value
                });
            });

            const formData = {
                companyName: document.getElementById('company-name').value,
                logoUrl: document.getElementById('logo-url-input').value, // Salva o URL do logo (apenas URL, não arquivo local)
                lastLogoSource: currentLogoSource, // Salva qual tipo de input de logo estava selecionado
                // Note: File data from logo-file-input cannot be directly saved to localStorage for security/size reasons.
                products: products,
                distance: document.getElementById('distance').value,
                pricePerKm: document.getElementById('price-per-km').value,
                pixDiscountPercentage: document.getElementById('pix-discount-percentage').value,
                pixKeyType: document.getElementById('pix-key-type').value,
                pixKey: document.getElementById('pix-key').value,
                pixDescription: document.getElementById('pix-description').value
            };

            localStorage.setItem('budgetForm', JSON.stringify(formData));
            alert('Orçamento salvo com sucesso!');
        }

        function loadForm() {
            const savedData = localStorage.getItem('budgetForm');
            if (savedData) {
                const formData = JSON.parse(savedData);

                // Carrega o nome da empresa
                document.getElementById('company-name').value = formData.companyName || '';

                // Carrega o URL do logo e o tipo de input de logo selecionado
                document.getElementById('logo-url-input').value = formData.logoUrl || '';
                currentLogoSource = formData.lastLogoSource || 'url'; // Define a fonte do logo

                // Seleciona o radio button correto e atualiza a exibição
                if (currentLogoSource === 'file') {
                    document.getElementById('radio-logo-file').checked = true;
                } else {
                    document.getElementById('radio-logo-url').checked = true;
                }
                toggleLogoInputType(); // Chama para exibir o campo correto e o logo (se URL)

                // Limpa os produtos atuais
                const productList = document.getElementById('product-list');
                productList.innerHTML = '';

                // Carrega os produtos
                formData.products.forEach(product => {
                    const newItem = document.createElement('div');
                    newItem.classList.add('product-item');
                    newItem.innerHTML = `
                        <input type="text" class="product-description" placeholder="Descrição do Produto" value="${product.description || ''}">
                        <div class="input-group">
                            <label>Qtd:</label>
                            <input type="number" class="quantity-input" value="${product.quantity || '1'}" min="1">
                        </div>
                        <div class="input-group">
                            <label>Valor (R$):</label>
                            <input type="number" class="value-input" placeholder="0.00" step="0.01" value="${product.value || ''}">
                        </div>
                        <div class="input-group">
                            <label>acr. (%):</label>
                            <input type="number" class="percentage-input" value="${product.percentage || '20'}" min="0">
                        </div>
                        <div class="total-display">R$ 0,00</div>
                        <button class="delete-product">X</button>
                    `;
                    productList.appendChild(newItem);
                    attachProductItemListeners(newItem); // Anexa listeners aos novos itens carregados
                });

                // Carrega outros campos
                document.getElementById('distance').value = formData.distance || '';
                document.getElementById('pricePerKm').value = formData.pricePerKm || '';
                document.getElementById('pix-discount-percentage').value = formData.pixDiscountPercentage || '';
                document.getElementById('pix-key-type').value = formData.pixKeyType || '';
                document.getElementById('pix-key').value = formData.pixKey || '';
                document.getElementById('pix-description').value = formData.pixDescription || '';

                // Recalcula todos os totais após carregar
                updateOverallTotals();
                document.querySelectorAll('.product-item').forEach(item => {
                    const event = new Event('input');
                    item.querySelector('.value-input').dispatchEvent(event); // Dispara para atualizar os totais de cada linha
                });

                alert('Orçamento carregado com sucesso!');
            } else {
                alert('Nenhum orçamento salvo encontrado.');
            }
        }

        // Função para iniciar um novo orçamento (limpar todos os campos)
        function newBudget() {
            // Limpa o nome da empresa
            document.getElementById('company-name').value = '';

            // Limpa o logo
            document.getElementById('radio-logo-url').checked = true; // Volta para URL como padrão
            document.getElementById('logo-url-input').value = '';
            document.getElementById('logo-file-input').value = ''; // Limpa o arquivo selecionado
            toggleLogoInputType(); // Atualiza a exibição do logo

            // Remove todos os itens de produto, exceto o primeiro (se houver)
            const productList = document.getElementById('product-list');
            while (productList.children.length > 1) {
                productList.removeChild(productList.lastChild);
            }
            // Reseta o primeiro item
            const firstProductItem = productList.querySelector('.product-item');
            if (firstProductItem) {
                firstProductItem.querySelector('.product-description').value = '';
                firstProductItem.querySelector('.quantity-input').value = '1';
                firstProductItem.querySelector('.value-input').value = '';
                firstProductItem.querySelector('.percentage-input').value = '20';
                firstProductItem.querySelector('.total-display').textContent = 'R$ 0,00';
            }

            // Limpa informações de entrega
            document.getElementById('distance').value = '';
            document.getElementById('price-per-km').value = '';

            // Limpa informações de desconto
            document.getElementById('pix-discount-percentage').value = '';

            // Limpa informações Pix
            document.getElementById('pix-key-type').value = '';
            document.getElementById('pix-key').value = '';
            document.getElementById('pix-description').value = '';

            // Recalcula todos os totais para zerar o resumo
            updateOverallTotals();

            alert('Novo orçamento iniciado!');
        }

        // Função para recarregar/atualizar os valores (recalcular totais)
        function reloadValues() {
            updateOverallTotals(); // Recalcula todos os totais
            updateLogoDisplay(); // Garante que o logo está atualizado (especialmente se a URL foi alterada)
            alert('Valores atualizados!');
        }

        // Função para abrir o grupo de WhatsApp
        function openWhatsAppGroup() {
            // Substitua 'SEU_LINK_DO_GRUPO' pelo link real do seu grupo de WhatsApp
            const whatsappLink = 'https://chat.whatsapp.com/SEU_LINK_DO_GRUPO';
            window.open(whatsappLink, '_blank');
        }


        // PWA - Registro do Service Worker
        function registerServiceWorker() {
            if ('serviceWorker' in navigator) {
                window.addEventListener('load', () => {
                    navigator.serviceWorker.register('service-worker.js')
                        .then(registration => {
                            console.log('ServiceWorker registado com sucesso:', registration.scope);
                        })
                        .catch(error => {
                            console.log('Falha no registo do ServiceWorker:', error);
                        });
                });
            }
        }
    </script>
</body>
</html>
